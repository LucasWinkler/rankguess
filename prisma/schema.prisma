datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clips         Clip[]
  stats         Stats[]
  // guesses       Guess[]
}

// User submitted clips that must be accepted before being shown on the site
// Once accepted the video will be uploaded via the youtube api, and the
// youtube url will be stored.
model Clip {
  id              String       @id @default(cuid())
  videoFile       String
  rank            Rank         @relation(fields: [rankId], references: [id])
  rankId          String
  youtubeUrl      String?
  submittedDate   DateTime     @default(now())
  acceptedDate    DateTime?
  isAccepted      Boolean      @default(false)
  hasBeenFeatured Boolean      @default(false)
  game            Game         @relation(fields: [gameId], references: [id])
  gameId          String
  player          User         @relation(fields: [playerId], references: [id])
  playerId        String
  currentClip     CurrentClip?

  @@index([playerId])
  @@index([gameId])
  @@index([rankId])
}

model Game {
  id            String       @id @default(cuid())
  name          String       @unique
  shortName     String?      @unique
  slug          String       @unique
  thumbnailPath String
  isEnabled     Boolean      @default(false)
  currentClip   CurrentClip?

  ranks Rank[]
  stats Stats[]
  clips Clip[]
}

model CurrentClip {
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @unique
  clip   Clip   @relation(fields: [clipId], references: [id])
  clipId String @unique
}

model Rank {
  id        String @id @default(cuid())
  name      String
  imagePath String
  order     Int    @default(0)
  game      Game   @relation(fields: [gameId], references: [id])
  gameId    String

  clips Clip[]

  @@index([gameId])
}

model Stats {
  id            String @id @default(cuid())
  gamesPlayed   Int    @default(0)
  gamesWon      Int    @default(0)
  streak        Int    @default(0)
  longestStreak Int    @default(0)
  game          Game   @relation(fields: [gameId], references: [id])
  gameId        String
  user          User   @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId])
  @@index([gameId])
}

// model Guess {
//   id        String   @id @default(cuid())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   isCorrect Boolean  @default(false)
//   guessedAt DateTime @default(now())

//   @@index([userId])
// }

// Potential rework for the clip table. Not entirely sure if I want to keep it
// how it is now. I like the way it is now because it has less redundant data 
// and it's easier to query. But I also like the idea of having a separate 
// table for organization.

// model FeaturedClip {
//   game           Game         @relation(fields: [gameId], references: [id])
//   gameId         String       @unique
//   acceptedClip   AcceptedClip @relation(fields: [acceptedClipId], references: [id])
//   acceptedClipId String       @unique
// }

// model AcceptedClip {
//   id              String        @id @default(cuid())
//   youtubeId       String        @unique
//   submittedClip   SubmittedClip @relation(fields: [submittedClipId], references: [id])
//   submittedClipId String        @unique
//   game            Game          @relation(fields: [gameId], references: [id])
//   gameId          String
//   featuredClip    FeaturedClip?
//   acceptedAt      DateTime      @default(now())

//   @@index([submittedClipId])
//   @@index([gameId])
// }

// model SubmittedClip {
//   id           String        @id @default(cuid())
//   videoFile    String
//   rank         Rank          @relation(fields: [rankId], references: [id])
//   rankId       String
//   game         Game          @relation(fields: [gameId], references: [id])
//   gameId       String
//   player       User          @relation(fields: [playerId], references: [id])
//   playerId     String
//   submittedAt    DateTime      @default(now())
//   acceptedClip AcceptedClip?

//   @@index([playerId])
//   @@index([gameId])
//   @@index([rankId])
// }
