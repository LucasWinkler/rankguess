datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clips         Clip[]
  stats         Stats[]
  userGameSaves UserGameSave[]
}

model Game {
  id            String         @id @default(cuid())
  name          String         @unique
  shortName     String?        @unique
  slug          String         @unique
  thumbnailPath String
  isEnabled     Boolean        @default(false)
  currentClip   CurrentClip?
  ranks         Rank[]
  stats         Stats[]
  clips         Clip[]
  userGameSaves UserGameSave[]
}

model Clip {
  id              String       @id @default(cuid())
  videoFile       String
  youtubeUrl      String?
  submittedDate   DateTime     @default(now())
  acceptedDate    DateTime?
  isAccepted      Boolean      @default(false)
  hasBeenFeatured Boolean      @default(false)
  rankId          String
  gameId          String
  playerId        String
  rank            Rank         @relation(fields: [rankId], references: [id])
  game            Game         @relation(fields: [gameId], references: [id])
  player          User         @relation(fields: [playerId], references: [id])
  currentClip     CurrentClip?

  @@index([playerId])
  @@index([gameId])
  @@index([rankId])
}

model CurrentClip {
  gameId String @unique
  clipId String @unique
  game   Game   @relation(fields: [gameId], references: [id])
  clip   Clip   @relation(fields: [clipId], references: [id])
}

model Rank {
  id        String @id @default(cuid())
  name      String
  imagePath String
  gameId    String
  order     Int    @default(0)
  game      Game   @relation(fields: [gameId], references: [id])
  clips     Clip[]

  @@index([gameId])
}

model Stats {
  id               String @id @default(cuid())
  gamesPlayed      Int    @default(0)
  gamesWon         Int    @default(0)
  winStreak        Int    @default(0)
  longestWinStreak Int    @default(0)
  gameId           String
  userId           String
  game             Game   @relation(fields: [gameId], references: [id])
  user             User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([gameId])
}

model UserGameSave {
  id         String @id @default(cuid())
  userId     String
  gameId     String
  clipId     String
  guessCount Int    @default(0)
  user       User   @relation(fields: [userId], references: [id])
  game       Game   @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}
